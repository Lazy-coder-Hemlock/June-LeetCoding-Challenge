#Power of Two

class Solution {
public:
    bool isPowerOfTwo(int n) {
        if(n<0)
            return false;
        return n and !(n&(n-1));
    }
};


#Is Subsequence
class Solution {
public:
    bool isSubsequence(string s, string t) {
        if(s.size()==0)
            return true;
            int i,j;
            i=j=0;
            while(i<s.size() && j<t.size()){
                if(s[i]==t[j])
                    i++,j++;
                else
                    j++;
                }
             return (i==s.length())?1:0;
    }
};

#search insert position
class Solution:
    def searchInsert(self, nums: List[int], target: int) -> int:
        try:
            return nums.index(target)
        except:
            nums.append(target)
            nums.sort()
            return nums.index(target)
        
#Sort Colors
class Solution {
public:
    void sortColors(vector<int>& nums) {
         int zero=0;
        int one=0;
        int two=nums.size()-1;
        while(one<=two)
            if(nums[one]==0)
                swap(nums[zero++],nums[one++]);
            else if(nums[one]==1)
                one++;
        else if(nums[one]==2)
            swap(nums[one],nums[two--]);
    }   
};

#Insert Delete GetRandom O(1)

import random as r
class RandomizedSet:

    def __init__(self):
        self.s=set()
        """
        Initialize your data structure here.
        """
        

    def insert(self, val: int) -> bool:
        if val in self.s:
            return False
        self.s.add(val)
        return True
        """
        Inserts a value to the set. Returns true if the set did not already contain the specified element.
        """
        

    def remove(self, val: int) -> bool:
        if val in self.s:
            self.s.remove(val)
            return True
        return False
        """
        Removes a value from the set. Returns true if the set contained the specified element.
        """
        

    def getRandom(self) -> int:
        self.i=r.randint(0,len(self.s)-1)
        return list(self.s)[self.i]
        """
        Get a random element from the set.
        """
        


# Your RandomizedSet object will be instantiated and called as such:
# obj = RandomizedSet()
# param_1 = obj.insert(val)
# param_2 = obj.remove(val)
# param_3 = obj.getRandom()
